{
  "version": 3,
  "sources": ["../../src/utils/actor.utils.ts", "../../src/utils/agent.utils.ts", "../../src/utils/arrays.utils.ts", "../../src/utils/asserts.utils.ts", "../../src/utils/did.utils.ts", "../../src/utils/principal.utils.ts"],
  "sourcesContent": ["import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { IDL } from \"@dfinity/candid\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type { CanisterOptions } from \"../types/canister.options\";\nimport { defaultAgent } from \"./agent.utils\";\n\ntype RequiredCanisterOptions<T> = Required<\n  Pick<CanisterOptions<T>, \"canisterId\">\n> &\n  Omit<CanisterOptions<T>, \"canisterId\">;\n\nexport const createServices = <T>({\n  options: {\n    canisterId,\n    serviceOverride,\n    certifiedServiceOverride,\n    agent: agentOption,\n  },\n  idlFactory,\n  certifiedIdlFactory,\n}: {\n  options: RequiredCanisterOptions<T>;\n  idlFactory: IDL.InterfaceFactory;\n  certifiedIdlFactory: IDL.InterfaceFactory;\n}): {\n  service: ActorSubclass<T>;\n  certifiedService: ActorSubclass<T>;\n  agent: Agent;\n  canisterId: Principal;\n} => {\n  const agent: Agent = agentOption ?? defaultAgent();\n\n  const service: ActorSubclass<T> =\n    serviceOverride ??\n    Actor.createActor<T>(idlFactory, {\n      agent,\n      canisterId,\n    });\n\n  const certifiedService: ActorSubclass<T> =\n    certifiedServiceOverride ??\n    Actor.createActor<T>(certifiedIdlFactory, {\n      agent,\n      canisterId,\n    });\n\n  return { service, certifiedService, agent, canisterId };\n};\n", "import type { Agent, Identity } from \"@dfinity/agent\";\nimport { AnonymousIdentity, HttpAgent } from \"@dfinity/agent\";\n\n/**\n * Get a default agent that connects to mainnet with the anonymous identity.\n * @returns The default agent to use\n */\nexport const defaultAgent = (): Agent =>\n  new HttpAgent({\n    host: \"https://ic0.app\",\n    identity: new AnonymousIdentity(),\n  });\n\n/**\n * Create an agent for a given identity\n * @param identity A mandatory identity to use for the agent\n * @param host An optional host to connect to\n * @param fetchRootKey Fetch root key for certificate validation during local development or on testnet\n */\nexport const createAgent = async ({\n  identity,\n  host,\n  fetchRootKey = false,\n}: {\n  identity: Identity;\n  host?: string;\n  fetchRootKey?: boolean;\n}): Promise<HttpAgent> => {\n  const agent: HttpAgent = new HttpAgent({\n    identity,\n    ...(host !== undefined && { host }),\n  });\n\n  if (fetchRootKey) {\n    await agent.fetchRootKey();\n  }\n\n  return agent;\n};\n", "export const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.getBigUint64 === \"function\") {\n    return view.getBigUint64(0);\n  } else {\n    const high = BigInt(view.getUint32(0));\n    const low = BigInt(view.getUint32(4));\n\n    return (high << BigInt(32)) + low;\n  }\n};\n\nexport const arrayBufferToUint8Array = (buffer: ArrayBuffer): Uint8Array =>\n  new Uint8Array(buffer);\n\nexport const uint8ArrayToArrayOfNumber = (array: Uint8Array): Array<number> =>\n  Array.from(array);\n\nexport const arrayOfNumberToUint8Array = (numbers: Array<number>): Uint8Array =>\n  new Uint8Array(numbers);\n\nexport const asciiStringToByteArray = (text: string): Array<number> =>\n  Array.from(text).map((c) => c.charCodeAt(0));\n", "export class NullishError extends Error {}\n\nexport const assertNonNullish: <T>(\n  value: T,\n  message?: string\n) => asserts value is NonNullable<T> = <T>(\n  value: T,\n  message?: string\n): void => {\n  if (value === null || value === undefined) {\n    throw new NullishError(message);\n  }\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nexport const toNullable = <T>(value?: T): [] | [T] => {\n  return value ? [value] : [];\n};\n\nexport const fromNullable = <T>(value: [] | [T]): T | undefined => {\n  return value?.[0];\n};\n\nexport const fromDefinedNullable = <T>(value: [] | [T]): T => {\n  const result = fromNullable(value);\n\n  assertNonNullish(result);\n\n  return result;\n};\n", "import type { Principal } from \"@dfinity/principal\";\n\n/**\n * Convert a principal to a Uint8Array 32 length.\n * e.g. Useful to convert a canister ID when topping up cycles with the Cmc canister\n * @param principal The principal that needs to be converted to Subaccount\n */\nexport const principalToSubAccount = (principal: Principal): Uint8Array => {\n  const bytes: Uint8Array = principal.toUint8Array();\n  const subAccount: Uint8Array = new Uint8Array(32);\n  subAccount[0] = bytes.length;\n  subAccount.set(bytes, 1);\n  return subAccount;\n};\n"],
  "mappings": "AACA,uCCAA,kEAMO,GAAM,GAAe,IAC1B,GAAI,GAAU,CACZ,KAAM,kBACN,SAAU,GAAI,EAChB,CAAC,EAQU,EAAc,MAAO,CAChC,WACA,OACA,eAAe,MAKS,CACxB,GAAM,GAAmB,GAAI,GAAU,CACrC,WACA,GAAI,IAAS,QAAa,CAAE,MAAK,CACnC,CAAC,EAED,MAAI,IACF,KAAM,GAAM,aAAa,EAGpB,CACT,ED1BO,GAAM,GAAiB,CAAI,CAChC,QAAS,CACP,aACA,kBACA,2BACA,MAAO,GAET,aACA,yBAUG,CACH,GAAM,GAAe,GAAe,EAAa,EAE3C,EACJ,GACA,EAAM,YAAe,EAAY,CAC/B,QACA,YACF,CAAC,EAEG,EACJ,GACA,EAAM,YAAe,EAAqB,CACxC,QACA,YACF,CAAC,EAEH,MAAO,CAAE,UAAS,mBAAkB,QAAO,YAAW,CACxD,EEhDO,GAAM,GAAqB,AAAC,GAA8B,CAC/D,GAAM,GAAO,GAAI,UAAS,EAAM,OAAQ,EAAM,WAAY,EAAM,UAAU,EAC1E,GAAI,MAAO,GAAK,cAAiB,WAC/B,MAAO,GAAK,aAAa,CAAC,EACrB,CACL,GAAM,GAAO,OAAO,EAAK,UAAU,CAAC,CAAC,EAC/B,EAAM,OAAO,EAAK,UAAU,CAAC,CAAC,EAEpC,MAAQ,IAAQ,OAAO,EAAE,GAAK,CAChC,CACF,EAEa,EAA0B,AAAC,GACtC,GAAI,YAAW,CAAM,EAEV,EAA4B,AAAC,GACxC,MAAM,KAAK,CAAK,EAEL,EAA4B,AAAC,GACxC,GAAI,YAAW,CAAO,EAEX,EAAyB,AAAC,GACrC,MAAM,KAAK,CAAI,EAAE,IAAI,AAAC,GAAM,EAAE,WAAW,CAAC,CAAC,ECtBtC,GAAM,GAAN,aAA2B,MAAM,CAAC,EAE5B,EAG0B,CACrC,EACA,IACS,CACT,GAAI,GAAU,KACZ,KAAM,IAAI,GAAa,CAAO,CAElC,ECVO,GAAM,GAAa,AAAI,GACrB,EAAQ,CAAC,CAAK,EAAI,CAAC,EAGf,EAAe,AAAI,GACvB,IAAQ,GAGJ,EAAsB,AAAI,GAAuB,CAC5D,GAAM,GAAS,EAAa,CAAK,EAEjC,SAAiB,CAAM,EAEhB,CACT,ECTO,GAAM,GAAwB,AAAC,GAAqC,CACzE,GAAM,GAAoB,EAAU,aAAa,EAC3C,EAAyB,GAAI,YAAW,EAAE,EAChD,SAAW,GAAK,EAAM,OACtB,EAAW,IAAI,EAAO,CAAC,EAChB,CACT",
  "names": []
}
