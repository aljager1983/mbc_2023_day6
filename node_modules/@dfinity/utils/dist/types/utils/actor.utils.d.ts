import type { ActorSubclass, Agent } from "@dfinity/agent";
import type { IDL } from "@dfinity/candid";
import type { Principal } from "@dfinity/principal";
import type { CanisterOptions } from "../types/canister.options";
declare type RequiredCanisterOptions<T> = Required<Pick<CanisterOptions<T>, "canisterId">> & Omit<CanisterOptions<T>, "canisterId">;
export declare const createServices: <T>({ options: { canisterId, serviceOverride, certifiedServiceOverride, agent: agentOption, }, idlFactory, certifiedIdlFactory, }: {
    options: RequiredCanisterOptions<T>;
    idlFactory: IDL.InterfaceFactory;
    certifiedIdlFactory: IDL.InterfaceFactory;
}) => {
    service: ActorSubclass<T>;
    certifiedService: ActorSubclass<T>;
    agent: Agent;
    canisterId: Principal;
};
export {};
