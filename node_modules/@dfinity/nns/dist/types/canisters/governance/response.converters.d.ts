import { Principal } from "@dfinity/principal";
import type { KnownNeuron as RawKnownNeuron, ListNeuronsResponse as RawListNeuronsResponse, ListProposalInfoResponse as RawListProposalInfoResponse, ProposalInfo as RawProposalInfo } from "../../../candid/governance";
import type { ListNeuronsResponse, Neuron as PbNeuron } from "../../../proto/governance_pb";
import type { KnownNeuron, ListProposalsResponse, NeuronInfo, ProposalInfo } from "../../types/governance_converters";
export declare const toProposalInfo: (proposalInfo: RawProposalInfo) => ProposalInfo;
export declare const toArrayOfNeuronInfo: ({ response: { neuron_infos, full_neurons }, canisterId, }: {
    response: RawListNeuronsResponse;
    canisterId: Principal;
}) => Array<NeuronInfo>;
export declare const toListProposalsResponse: ({ proposal_info, }: RawListProposalInfoResponse) => ListProposalsResponse;
export declare const toKnownNeuron: ({ id, known_neuron_data, }: RawKnownNeuron) => KnownNeuron;
export declare const convertPbNeuronToNeuronInfo: ({ pbNeurons, canisterId, }: {
    pbNeurons: PbNeuron[];
    canisterId: Principal;
}) => (pbNeuronMapEntry: ListNeuronsResponse.NeuronMapEntry) => NeuronInfo;
