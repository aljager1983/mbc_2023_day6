{
  "version": 3,
  "sources": ["../../src/token.ts", "../../src/enums/token.enums.ts"],
  "sourcesContent": ["import { ICPTs } from \"../proto/ledger_pb\";\nimport { E8S_PER_TOKEN, TOKEN_DECIMAL_ACCURACY } from \"./constants/constants\";\nimport { FromStringToTokenError } from \"./enums/token.enums\";\n\n/**\n * Receives a string representing a number and returns the big int or error.\n *\n * @param amount - in string format\n * @returns bigint | FromStringToTokenError\n */\nexport const convertStringToE8s = (\n  amount: string\n): bigint | FromStringToTokenError => {\n  // Remove all instances of \",\" and \"'\".\n  amount = amount.trim().replace(/[,']/g, \"\");\n\n  // Verify that the string is of the format 1234.5678\n  const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n  if (!regexMatch || regexMatch[0] !== amount) {\n    return FromStringToTokenError.InvalidFormat;\n  }\n\n  const [integral, fractional] = amount.split(\".\");\n\n  let e8s = BigInt(0);\n\n  if (integral) {\n    try {\n      e8s += BigInt(integral) * E8S_PER_TOKEN;\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  if (fractional) {\n    if (fractional.length > 8) {\n      return FromStringToTokenError.FractionalMoreThan8Decimals;\n    }\n    try {\n      e8s += BigInt(fractional.padEnd(8, \"0\"));\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  return e8s;\n};\n\nexport interface Token {\n  symbol: string;\n  name: string;\n}\n\nexport const ICPToken: Token = {\n  symbol: \"ICP\",\n  name: \"Internet Computer\",\n};\n\n/**\n * Represents an amount of tokens.\n *\n * @param e8s - The amount of tokens in bigint.\n * @param token - The token type.\n */\nexport class TokenAmount {\n  private constructor(protected e8s: bigint, public token: Token) {}\n\n  /**\n   * Initialize from a bigint. Bigint are considered e8s.\n   *\n   * @param {amount: bigint; token?: Token;} params\n   * @param {bigint} params.amount The amount in bigint format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromE8s({\n    amount,\n    token = ICPToken,\n  }: {\n    amount: bigint;\n    token?: Token;\n  }): TokenAmount {\n    return new TokenAmount(amount, token);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   *\n   * @param {amount: string; token?: Token;} params\n   * @param {string} params.amount The amount in string format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromString({\n    amount,\n    token = ICPToken,\n  }: {\n    amount: string;\n    token?: Token;\n  }): TokenAmount | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n\n    if (typeof e8s === \"bigint\") {\n      return new TokenAmount(e8s, token);\n    }\n    return e8s;\n  }\n\n  /**\n   * Initialize from a number.\n   *\n   * 1 integer is considered E8S_PER_TOKEN\n   *\n   * @param {amount: number; token?: Token;} params\n   * @param {string} params.amount The amount in number format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromNumber({\n    amount,\n    token = ICPToken,\n  }: {\n    amount: number;\n    token?: Token;\n  }): TokenAmount | FromStringToTokenError {\n    // If more than TOKEN_DECIMAL_ACCURACY, it returns 0, not the error.\n    return TokenAmount.fromString({\n      amount: amount.toFixed(TOKEN_DECIMAL_ACCURACY),\n      token,\n    });\n  }\n\n  /**\n   *\n   * @returns The amount of e8s.\n   */\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n\n  /**\n   * TODO: Remove this method when ICP class is not used anymore\n   * @deprecated\n   */\n  public toProto(): ICPTs {\n    const proto = new ICPTs();\n    proto.setE8s(this.e8s.toString());\n    return proto;\n  }\n}\n", "export enum FromStringToTokenError {\n  FractionalMoreThan8Decimals,\n  InvalidFormat,\n}\n"],
  "mappings": "0HAAA,MAAsB,OCAf,GAAK,GAAL,CAAK,GACV,kEACA,qCAFU,WDUL,GAAM,GAAqB,AAChC,GACoC,CAEpC,EAAS,EAAO,KAAK,EAAE,QAAQ,QAAS,EAAE,EAG1C,GAAM,GAAa,EAAO,MAAM,aAAa,EAC7C,GAAI,CAAC,GAAc,EAAW,KAAO,EACnC,MAAO,GAGT,GAAM,CAAC,EAAU,GAAc,EAAO,MAAM,GAAG,EAE3C,EAAM,OAAO,CAAC,EAElB,GAAI,EACF,GAAI,CACF,GAAO,OAAO,CAAQ,EAAI,CAC5B,MAAE,CACA,MAAO,EACT,CAGF,GAAI,EAAY,CACd,GAAI,EAAW,OAAS,EACtB,MAAO,GAET,GAAI,CACF,GAAO,OAAO,EAAW,OAAO,EAAG,GAAG,CAAC,CACzC,MAAE,CACA,MAAO,EACT,CACF,CAEA,MAAO,EACT,EAOa,EAAkB,CAC7B,OAAQ,MACR,KAAM,mBACR,EAQa,EAAN,KAAkB,CACvB,AAAQ,YAAsB,EAAoB,EAAc,CAAlC,WAAoB,YAAe,CASjE,MAAc,SAAQ,CACpB,SACA,QAAQ,GAIM,CACd,MAAO,IAAI,GAAY,EAAQ,CAAK,CACtC,CAaA,MAAc,YAAW,CACvB,SACA,QAAQ,GAI+B,CACvC,GAAM,GAAM,EAAmB,CAAM,EAErC,MAAI,OAAO,IAAQ,SACV,GAAI,GAAY,EAAK,CAAK,EAE5B,CACT,CAWA,MAAc,YAAW,CACvB,SACA,QAAQ,GAI+B,CAEvC,MAAO,GAAY,WAAW,CAC5B,OAAQ,EAAO,QAAQ,CAAsB,EAC7C,OACF,CAAC,CACH,CAMA,AAAO,OAAgB,CACrB,MAAO,MAAK,GACd,CAMA,AAAO,SAAiB,CACtB,GAAM,GAAQ,GAAI,SAClB,SAAM,OAAO,KAAK,IAAI,SAAS,CAAC,EACzB,CACT,CACF",
  "names": []
}
