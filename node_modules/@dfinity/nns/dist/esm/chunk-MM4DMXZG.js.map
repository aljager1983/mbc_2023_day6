{
  "version": 3,
  "sources": ["../../src/icp.ts"],
  "sourcesContent": ["import { ICPTs } from \"../proto/ledger_pb\";\nimport type { FromStringToTokenError } from \"./enums/token.enums\";\nimport { convertStringToE8s, ICPToken, type Token } from \"./token\";\n\n/**\n * We don't extend to keep `fromE8s` and `fromString` as backwards compatible.\n * @deprecated\n */\nexport class ICP {\n  private constructor(private e8s: bigint, public token: Token) {}\n\n  public static fromE8s(amount: bigint): ICP {\n    return new ICP(amount, ICPToken);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   */\n  public static fromString(amount: string): ICP | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n    if (typeof e8s === \"bigint\") {\n      return new ICP(e8s, ICPToken);\n    }\n    return e8s;\n  }\n\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n\n  public toProto(): ICPTs {\n    const proto = new ICPTs();\n    proto.setE8s(this.e8s.toString());\n    return proto;\n  }\n}\n"],
  "mappings": "+HAAA,MAAsB,OAQf,GAAM,GAAN,KAAU,CACf,AAAQ,YAAoB,EAAoB,EAAc,CAAlC,WAAoB,YAAe,CAE/D,MAAc,SAAQ,EAAqB,CACzC,MAAO,IAAI,GAAI,EAAQ,CAAQ,CACjC,CASA,MAAc,YAAW,EAA8C,CACrE,GAAM,GAAM,EAAmB,CAAM,EACrC,MAAI,OAAO,IAAQ,SACV,GAAI,GAAI,EAAK,CAAQ,EAEvB,CACT,CAEA,AAAO,OAAgB,CACrB,MAAO,MAAK,GACd,CAEA,AAAO,SAAiB,CACtB,GAAM,GAAQ,GAAI,SAClB,SAAM,OAAO,KAAK,IAAI,SAAS,CAAC,EACzB,CACT,CACF",
  "names": []
}
