import { Identity } from "@dfinity/agent";
import { AuthClient, AuthClientCreateOptions, AuthClientLoginOptions } from "@dfinity/auth-client";
import { Principal } from "@dfinity/principal";
import { LoginButton } from "./login-button";
interface AuthClientStorage {
    get(key: string): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    remove(key: string): Promise<void>;
}
/**
 * Options to configure authClient used by IILoginButton
 * @example
 * button.addEventListener('ready', (e)=>{
 *  // configure login and auth-client options here:
 *  e.target.configure({
 *    identityProvider: "http://localhost:3000"
 *  });
 * })
 */
export declare type IILoginButtonProps = {
    createOptions?: AuthClientCreateOptions;
    loginOptions?: AuthClientLoginOptions;
    storage?: AuthClientStorage;
};
interface State {
    authClient?: AuthClient;
    isAuthenticated: boolean;
    identity?: Identity;
    ready: boolean;
    createOptions?: AuthClientCreateOptions;
    loginOptions?: AuthClientLoginOptions;
    storage?: AuthClientStorage;
}
/**
 * Internet Identity Login Button
 * Drop-in web component to allow your users to log in with Internet Identity
 *
 * To use:
 * Set up the component with <ii-login-button></ii-login-button>
 * @example
 * button.addEventListener('ready', (e)=>{
 *  // configure login and auth-client options here:
 *  e.target.configure(options);
 * })
 * button.addEventListener('login', (e)=>{
 *  // Access authClient
 *  const client = e.target.authClient;
 *  // Principal
 *  const principal = e.target.principal // also principalString
 *  // AccountIdentifier for ICP ledger
 *  const account = e.target.accountIdentifier
 * })
 */
declare class IILoginButton extends LoginButton {
    private _state;
    constructor();
    private init;
    connectedCallback(): void;
    setState(newState: {
        [Property in keyof State]+?: State[Property];
    }): void;
    private render;
    /**
     * @returns the internal {@link AuthClient} used in the component
     */
    get authClient(): AuthClient;
    /**
     * @returns whether the current identity is authenticated or is anonymous
     */
    get isAuthenticated(): boolean;
    /**
     * @returns the current {@link Identity}
     */
    get identity(): Identity | undefined;
    /**
     * @returns the {@link Principal} of the current {@link Identity}
     */
    get principal(): Principal | undefined;
    /**
     * @returns string of the {@link Principal}
     */
    get principalString(): string | undefined;
    /**
     * @returns the default {@link AccountIdentifier} for the current principal as a string
     */
    get accountId(): string | undefined;
    /**
     * internal method - do not call
     */
    private _login;
    /**
     * internal method - do not call
     */
    private _handleSuccess;
    /**
     * Logs out authClient and clears storage
     */
    logout(): void;
    /**
     *
     * @param {IILoginButtonProps} props - change defaults for {@link AuthClient} login, create, and storage
     * @param {IILoginButtonProps["createOptions"]} props.createOptions - {@link AuthClientCreateOptions}
     * @param {IILoginButtonProps["storage"]} props.loginOptions - {@link AuthClientLoginOptions}
     * @param {IILoginButtonProps["storage"]} props.storage - {@link AuthClientStorage}
     */
    configure(props: IILoginButtonProps): void;
}
export default IILoginButton;
